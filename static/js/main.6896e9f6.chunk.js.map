{"version":3,"sources":["components/Container.js","components/Jumbotron/index.js","components/SearchBar/index.js","components/Row/index.js","components/Table/index.js","components/TableRow/index.js","utils/API.js","components/UserContainer.js","App.js","index.js"],"names":["Container","props","children","Jumbotron","className","Component","SearchBar","value","startDOB","onChange","handleStartDOBChange","type","name","id","endDOB","handleEndDOBChange","searchName","handleNameChange","list","placeholder","names","map","key","onClick","clearBtn","Row","rowClass","Table","sortByColumn","scope","TableRows","src","picture","alt","first","last","username","email","dob","split","slice","axios","get","UserContainer","useState","users","setUsers","setNames","setSearchName","setEndDOB","setStartDOB","sorted","setSorted","useEffect","API","then","res","data","results","namesArr","result","some","nameArr","push","catch","err","console","log","event","sortedUsers","preventDefault","target","sort","a","b","login","medium","date","user","TableRow","uuid","userDOB","parseInt","endDOBSearch","replace","startDOBSearch","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6896e9f6.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Container(props) {\n  return <div>{props.children}</div>;\n}\n\nexport default Container;","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Jumbotron extends Component {\n    render() {\n        return (\n            <div className=\"jumbotron jumbotron-fluid text-center\">\n                    <h1>User Directory</h1>\n                    <p>Sort the displayed information by column or use the Search Box to narrow your results </p>\n            </div>\n        )\n    }\n}\n\nexport default Jumbotron;","import React from \"react\";\n\nfunction SearchBar(props) {\n    return (\n        <div className=\"search-form\">\n            <form className=\"form-inline py-3 d-flex justify-content-center\">\n                <div className=\"input-group\">\n                    <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\">DOB</span>\n                    </div>\n                    <input\n                        value={props.startDOB}\n                        onChange={props.handleStartDOBChange}\n                        type=\"date\"\n                        className=\"form-control\"\n                        name=\"startDate\"\n                        id=\"startDate\"\n                    />\n                    <input\n                    value={props.endDOB}\n                    onChange={props.handleEndDOBChange}\n                        type=\"date\"\n                        className=\"form-control\"\n                        name=\"endDate\"\n                        id=\"endDate\"\n                    />\n                </div>\n                <input\n                    value={props.searchName}\n                    onChange={props.handleNameChange}\n                    list=\"names\"\n                    type=\"text\"\n                    className=\"form-control col-md-2 mx-5\"\n                    name=\"nameSearch\"\n                    id=\"nameSearch\"\n                    placeholder=\"Name\"\n                />\n                <datalist id=\"names\">\n                    {props.names.map(name => (\n                        <option value={name} key={name} />\n                    ))}\n                </datalist>\n                <button onClick={props.clearBtn} type=\"submit\" className=\"btn btn-danger border-dark\">Reset</button>\n            </form>\n        </div>\n    );\n}\n\nexport default SearchBar;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Row(props) {\n    return (\n    <div className={`col-md-12 ${props.rowClass}`}>\n        {props.children}\n    </div>\n);\n}\n\nexport default Row;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Table(props) {\n    return (\n        <div className=\"results col-md-11 mt-5\">\n\n            <table className=\"table table-striped table-sortable\">\n                <thead className=\"head\">\n                    <tr>\n                        <th onClick={props.sortByColumn} className=\"header\" id=\"image\" scope=\"col\">Profile Pic</th>\n                        <th onClick={props.sortByColumn} className=\"header\" id=\"name\" scope=\"col\">Name</th>\n                        <th onClick={props.sortByColumn} className=\"header\" id=\"username\" scope=\"col\">Username</th>\n                        <th onClick={props.sortByColumn} className=\"header\" id=\"email\" scope=\"col\">Email</th>\n                        <th onClick={props.sortByColumn} className=\"header\" id=\"dob\" scope=\"col\">DOB</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {props.children}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n  \n\nexport default Table;","import React from \"react\";\nimport \"./style.css\"\n\nfunction TableRows(props) {\n    return (\n        <tr>\n            <td id=\"image\">\n                <img src={props.picture} alt=\"profile pic\"></img>\n            </td>\n            <td id=\"name\">{props.name.first + \" \" + props.name.last}</td>\n            <td id=\"username\">{props.username}</td>\n            <td id=\"email\">{props.email}</td>\n            <td id=\"dob\">{props.dob.split(\"-\")[1] + \"/\" + props.dob.split(\"-\")[2].slice(0,2) + \"/\" + props.dob.split(\"-\")[0]}</td>\n        </tr>\n    )\n}\n\nexport default TableRows;","import axios from \"axios\";\n\nexport default {\n    getUsers: function() {\n        return axios.get(\"https://randomuser.me/api/?results=100&inc=name,email,login,dob,picture,id\")\n    }\n}\n\n       ","import React, { useState, useEffect } from \"react\";\nimport Container from \"./Container\"\nimport Jumbotron from \"./Jumbotron/index\";\nimport SearchBar from \"./SearchBar/index\";\nimport Row from \"./Row/index.js\";\nimport Table from \"./Table\";\nimport TableRows from \"./TableRow\";\nimport API from \"../utils/API\";\n\nfunction UserContainer() {\n    // before the API call the state of users will be null, which means that \n    // nothing will be rendered in the table rows because there's a \n    // conditional below in the return, by the Table tag\n    const [users, setUsers] = useState(null);\n    const [names, setNames] = useState(null);\n    const [searchName, setSearchName] = useState(\"\");\n    const [endDOB, setEndDOB] = useState(\"mm/dd/yyyy\");\n    const [startDOB, setStartDOB] = useState(\"mm/dd/yyyy\");\n    const [sorted, setSorted] = useState(null);\n\n\n\n    useEffect(() => {\n        API.getUsers()\n            .then(res => {\n                setUsers(res.data.results);\n                let namesArr = [];\n                res.data.results.map(result => {\n                    const sameName = (nameArr) => { return nameArr === result.name.first }\n                    if (!namesArr.some(sameName)) {\n                        return namesArr.push(result.name.first);\n                    }\n                });\n                setNames(namesArr);\n            })\n            .catch(err => console.log(err));\n        // include the second argument as an empty array to prevent \n        // an infinite loop of API calls\n    }, []);\n\n\n    // Reset the table to display all entries\n    const clearBtn = event => {\n        event.preventDefault();\n        // clear the value of the input nameSearch\n        setSearchName(\"\");\n        setEndDOB(\"mm/dd/yyyy\");\n        setStartDOB(\"mm/dd/yyyy\");\n        setSorted(null)\n    }\n\n    // Display only selected names\n    const handleNameChange = event => {\n        setSearchName(event.target.value);\n    };\n\n    // Set the end of the date range for narrowed display of results\n    const handleEndDOBChange = event => {\n        setEndDOB(event.target.value);\n    }\n\n    // Set the beginning of the date range for narrowed display of results\n    const handleStartDOBChange = event => {\n        setStartDOB(event.target.value);\n    }\n\n    // Sort display by selected column\n    const sortByColumn = event => {\n        event.preventDefault();\n        console.log(event.target.id);\n\n        var sortedUsers;\n        if (event.target.id === \"username\") {\n            users.sort((a, b) => (a.login.username > b.login.username) ? 1 : -1);\n            sortedUsers = users;\n        }\n        else if (event.target.id === \"image\") {\n            users.sort((a, b) => (a.picture.medium > b.picture.medium) ? 1 : -1);\n            sortedUsers = users;\n        }\n        else if (event.target.id === \"email\") {\n            users.sort((a, b) => (a.email > b.email) ? 1 : -1);\n            sortedUsers = users;\n        }\n        else if (event.target.id === \"dob\") {\n            users.sort((a, b) => (a.dob.date > b.dob.date) ? 1 : -1);\n            sortedUsers = users;\n        }\n        else if (event.target.id === \"name\") {\n            users.sort((a, b) => {\n                if (a.name.first > b.name.first) {\n                    return 1\n                }\n                else if (a.name.first === b.name.first) {\n                    if (a.name.last > b.name.last) {\n                        return 1\n                    } else {\n                        return -1\n                    }\n                }\n                else {\n                    return -1\n                }\n            });\n            sortedUsers = users;\n        }\n        // use spread operator to clear the old array and make javascript \n        // understand the new one is different\n        setSorted([...sortedUsers]);\n        console.log(sorted);\n        console.log(sortedUsers)\n    }\n\n    return (\n        <Container>\n            <Jumbotron />\n            <Row rowClass=\"top-row\">\n                {names && <SearchBar\n                    clearBtn={clearBtn}\n                    handleNameChange={handleNameChange}\n                    names={names}\n                    searchName={searchName}\n                    endDOB={endDOB}\n                    handleEndDOBChange={handleEndDOBChange}\n                    startDOB={startDOB}\n                    handleStartDOBChange={handleStartDOBChange}\n                />\n                }\n            </Row>\n            <Row rowClass=\"bottom-row\">\n                {/* users && -> render users onl when we have a user, this will prevent that \n                at the beginning of loading, before the api gets the data \n                we receive an error because we don't have users */}\n\n                {/* Renders selection of Name & sorted by column */}\n                {users && searchName !== \"\" && startDOB === \"mm/dd/yyyy\" && endDOB === \"mm/dd/yyyy\" && <Table\n                    sortByColumn={sortByColumn}\n                >\n                    {sorted && sorted.map(user => {\n                        if (searchName === user.name.first) {\n                            return <TableRows\n                                key={user.login.uuid}\n                                picture={user.picture.medium}\n                                name={user.name}\n                                username={user.login.username}\n                                email={user.email}\n                                dob={user.dob.date}\n                            />\n                        }\n                    })\n                    }\n                    {sorted == null && users.map(user => {\n                        if (searchName === user.name.first) {\n                            return <TableRows\n                                key={user.login.uuid}\n                                picture={user.picture.medium}\n                                name={user.name}\n                                username={user.login.username}\n                                email={user.email}\n                                dob={user.dob.date}\n                            />\n                        }\n                    })\n                    }\n                </Table>}\n                {/* Renders selection of DOB & sorted by column*/}\n                {users && searchName === \"\" && startDOB !== \"mm/dd/yyyy\" && endDOB !== \"mm/dd/yyyy\" && <Table\n                    sortByColumn={sortByColumn}\n                >\n                    {sorted && sorted.map(user => {\n                        let userDOB = parseInt(user.dob.date.split(\"-\")[0] + user.dob.date.split(\"-\")[1] + user.dob.date.split(\"-\")[2].slice(0, 2));\n                        let endDOBSearch = parseInt(endDOB.replace(/-/g, \"\"));\n                        let startDOBSearch = parseInt(startDOB.replace(/-/g, \"\"));\n                        if (endDOBSearch >= userDOB && startDOBSearch <= userDOB) {\n                            return <TableRows\n                                key={user.login.uuid}\n                                picture={user.picture.medium}\n                                name={user.name}\n                                username={user.login.username}\n                                email={user.email}\n                                dob={user.dob.date}\n                            />\n                        }\n                    })\n                    }\n                    {sorted == null && users.map(user => {\n                        let userDOB = parseInt(user.dob.date.split(\"-\")[0] + user.dob.date.split(\"-\")[1] + user.dob.date.split(\"-\")[2].slice(0, 2));\n                        let endDOBSearch = parseInt(endDOB.replace(/-/g, \"\"));\n                        let startDOBSearch = parseInt(startDOB.replace(/-/g, \"\"));\n                        if (endDOBSearch >= userDOB && startDOBSearch <= userDOB) {\n                            return <TableRows\n                                key={user.login.uuid}\n                                picture={user.picture.medium}\n                                name={user.name}\n                                username={user.login.username}\n                                email={user.email}\n                                dob={user.dob.date}\n                            />\n                        }\n                    })\n                    }\n                </Table>}\n                {/* Renders selection of DOB and Name & sorts by column */}\n                {users && searchName !== \"\" && startDOB !== \"mm/dd/yyyy\" && endDOB !== \"mm/dd/yyyy\" && <Table\n                    sortByColumn={sortByColumn}\n                >\n                    {sorted && sorted.map(user => {\n                        let userDOB = parseInt(user.dob.date.split(\"-\")[0] + user.dob.date.split(\"-\")[1] + user.dob.date.split(\"-\")[2].slice(0, 2));\n                        let endDOBSearch = parseInt(endDOB.replace(/-/g, \"\"));\n                        let startDOBSearch = parseInt(startDOB.replace(/-/g, \"\"));\n                        if (endDOBSearch >= userDOB && startDOBSearch <= userDOB && searchName === user.name.first) {\n                            return <TableRows\n                                key={user.login.uuid}\n                                picture={user.picture.medium}\n                                name={user.name}\n                                username={user.login.username}\n                                email={user.email}\n                                dob={user.dob.date}\n                            />\n                        }\n                    })\n                    }\n                    {sorted == null && users.map(user => {\n                        let userDOB = parseInt(user.dob.date.split(\"-\")[0] + user.dob.date.split(\"-\")[1] + user.dob.date.split(\"-\")[2].slice(0, 2));\n                        let endDOBSearch = parseInt(endDOB.replace(/-/g, \"\"));\n                        let startDOBSearch = parseInt(startDOB.replace(/-/g, \"\"));\n                        if (endDOBSearch >= userDOB && startDOBSearch <= userDOB && searchName === user.name.first) {\n                            return <TableRows\n                                key={user.login.uuid}\n                                picture={user.picture.medium}\n                                name={user.name}\n                                username={user.login.username}\n                                email={user.email}\n                                dob={user.dob.date}\n                            />\n                        }\n                    })\n                    }\n                </Table>}\n                {/* Renders all table rows on load and after Reset is clicked & sorted by column*/}\n                {users && searchName === \"\" && endDOB === \"mm/dd/yyyy\" && <Table\n                    sortByColumn={sortByColumn}\n                >\n                    {sorted && sorted.map(user => (\n                        <TableRows\n                            key={user.login.uuid}\n                            picture={user.picture.medium}\n                            name={user.name}\n                            username={user.login.username}\n                            email={user.email}\n                            dob={user.dob.date}\n                        />\n                    ))\n                    }\n                    {sorted == null && users.map(user => (\n                        <TableRows\n                            key={user.login.uuid}\n                            picture={user.picture.medium}\n                            name={user.name}\n                            username={user.login.username}\n                            email={user.email}\n                            dob={user.dob.date}\n                        />\n                    ))\n                    }\n                </Table>}\n            </Row>\n        </Container>\n    );\n}\n\nexport default UserContainer;","import React from 'react';\nimport UserContainer from \"./components/UserContainer\";\n\nfunction App() {\n  return <UserContainer />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}